// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using wwimporters.infrastructure.Persistence;

#nullable disable

namespace wwimporters.efmigrations.Migrations
{
    [DbContext(typeof(WideWorldImportersContext))]
    [Migration("20221116104010_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_100_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.HasSequence<int>("BuyingGroupID", "Sequences")
                .StartsAt(3L);

            modelBuilder.HasSequence<int>("CityID", "Sequences")
                .StartsAt(38187L);

            modelBuilder.HasSequence<int>("ColorID", "Sequences")
                .StartsAt(37L);

            modelBuilder.HasSequence<int>("CountryID", "Sequences")
                .StartsAt(242L);

            modelBuilder.HasSequence<int>("CustomerCategoryID", "Sequences")
                .StartsAt(9L);

            modelBuilder.HasSequence<int>("CustomerID", "Sequences")
                .StartsAt(1062L);

            modelBuilder.HasSequence<int>("DeliveryMethodID", "Sequences")
                .StartsAt(11L);

            modelBuilder.HasSequence<int>("InvoiceID", "Sequences")
                .StartsAt(70511L);

            modelBuilder.HasSequence<int>("InvoiceLineID", "Sequences")
                .StartsAt(228266L);

            modelBuilder.HasSequence<int>("OrderID", "Sequences")
                .StartsAt(73596L);

            modelBuilder.HasSequence<int>("OrderLineID", "Sequences")
                .StartsAt(231413L);

            modelBuilder.HasSequence<int>("PackageTypeID", "Sequences")
                .StartsAt(15L);

            modelBuilder.HasSequence<int>("PaymentMethodID", "Sequences")
                .StartsAt(5L);

            modelBuilder.HasSequence<int>("PersonID", "Sequences")
                .StartsAt(3262L);

            modelBuilder.HasSequence<int>("PurchaseOrderID", "Sequences")
                .StartsAt(2075L);

            modelBuilder.HasSequence<int>("PurchaseOrderLineID", "Sequences")
                .StartsAt(8368L);

            modelBuilder.HasSequence<int>("SpecialDealID", "Sequences")
                .StartsAt(3L);

            modelBuilder.HasSequence<int>("StateProvinceID", "Sequences")
                .StartsAt(54L);

            modelBuilder.HasSequence<int>("StockGroupID", "Sequences")
                .StartsAt(11L);

            modelBuilder.HasSequence<int>("StockItemID", "Sequences")
                .StartsAt(228L);

            modelBuilder.HasSequence<int>("StockItemStockGroupID", "Sequences")
                .StartsAt(443L);

            modelBuilder.HasSequence<int>("SupplierCategoryID", "Sequences")
                .StartsAt(10L);

            modelBuilder.HasSequence<int>("SupplierID", "Sequences")
                .StartsAt(14L);

            modelBuilder.HasSequence<int>("SystemParameterID", "Sequences")
                .StartsAt(2L);

            modelBuilder.HasSequence<int>("TransactionID", "Sequences")
                .StartsAt(336253L);

            modelBuilder.HasSequence<int>("TransactionTypeID", "Sequences")
                .StartsAt(14L);

            modelBuilder.Entity("wwimporters.domain.Entities.BuyingGroup", b =>
                {
                    b.Property<int>("BuyingGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BuyingGroupID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[BuyingGroupID])")
                        .HasComment("Numeric ID used for reference to a buying group within the database");

                    b.Property<string>("BuyingGroupName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Full name of a buying group that customers can be members of");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidFrom");

                    b.Property<DateTime>("ValidTo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidTo");

                    b.HasKey("BuyingGroupId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "BuyingGroupName" }, "UQ_Sales_BuyingGroups_BuyingGroupName")
                        .IsUnique();

                    b.ToTable("BuyingGroups", "Sales");

                    b
                        .HasComment("Customer organizations can be part of groups that exert greater buying power")
                        .ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("BuyingGroups_Archive", "Sales");
                            ttb
                                .HasPeriodStart("ValidFrom")
                                .HasColumnName("ValidFrom");
                            ttb
                                .HasPeriodEnd("ValidTo")
                                .HasColumnName("ValidTo");
                        }
                    ));
                });

            modelBuilder.Entity("wwimporters.domain.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CityID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[CityID])")
                        .HasComment("Numeric ID used for reference to a city within the database");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(58)
                        .HasColumnType("nvarchar(58)")
                        .HasComment("Formal name of the city");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<long?>("LatestRecordedPopulation")
                        .HasColumnType("bigint")
                        .HasComment("Latest available population for the City");

                    b.Property<Geometry>("Location")
                        .HasColumnType("geography")
                        .HasComment("Geographic location of the city");

                    b.Property<int>("StateProvinceId")
                        .HasColumnType("int")
                        .HasColumnName("StateProvinceID")
                        .HasComment("State or province for this city. Has a foreign key");

                    b.Property<DateTime>("ValidFrom")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidFrom");

                    b.Property<DateTime>("ValidTo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidTo");

                    b.HasKey("CityId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "StateProvinceId" }, "FK_Application_Cities_StateProvinceID");

                    b.ToTable("Cities", "Application");

                    b
                        .HasComment("Cities that are part of any address (including geographic location)")
                        .ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("Cities_Archive", "Application");
                            ttb
                                .HasPeriodStart("ValidFrom")
                                .HasColumnName("ValidFrom");
                            ttb
                                .HasPeriodEnd("ValidTo")
                                .HasColumnName("ValidTo");
                        }
                    ));
                });

            modelBuilder.Entity("wwimporters.domain.Entities.ColdRoomTemperature", b =>
                {
                    b.Property<long>("ColdRoomTemperatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ColdRoomTemperatureID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ColdRoomTemperatureId"), 1L, 1);

                    b.Property<int>("ColdRoomSensorNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordedWhen")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("ValidFrom")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidFrom");

                    b.Property<DateTime>("ValidTo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidTo");

                    b.HasKey("ColdRoomTemperatureId")
                        .HasName("PK_Warehouse_ColdRoomTemperatures");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ColdRoomTemperatureId"), false);

                    b.HasIndex(new[] { "ColdRoomSensorNumber" }, "IX_Warehouse_ColdRoomTemperatures_ColdRoomSensorNumber");

                    b.ToTable("ColdRoomTemperatures", "Warehouse");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("ColdRoomTemperatures_Archive", "Warehouse");
                            ttb
                                .HasPeriodStart("ValidFrom")
                                .HasColumnName("ValidFrom");
                            ttb
                                .HasPeriodEnd("ValidTo")
                                .HasColumnName("ValidTo");
                        }
                    ));
                });

            modelBuilder.Entity("wwimporters.domain.Entities.Color", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ColorID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[ColorID])")
                        .HasComment("Numeric ID used for reference to a color within the database");

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Full name of a color that can be used to describe stock items");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidFrom");

                    b.Property<DateTime>("ValidTo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidTo");

                    b.HasKey("ColorId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "ColorName" }, "UQ_Warehouse_Colors_ColorName")
                        .IsUnique();

                    b.ToTable("Colors", "Warehouse");

                    b
                        .HasComment("Stock items can (optionally) have colors")
                        .ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("Colors_Archive", "Warehouse");
                            ttb
                                .HasPeriodStart("ValidFrom")
                                .HasColumnName("ValidFrom");
                            ttb
                                .HasPeriodEnd("ValidTo")
                                .HasColumnName("ValidTo");
                        }
                    ));
                });

            modelBuilder.Entity("wwimporters.domain.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CountryID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[CountryID])")
                        .HasComment("Numeric ID used for reference to a country within the database");

                    b.Property<Geometry>("Border")
                        .HasColumnType("geography")
                        .HasComment("Geographic border of the country as described by the United Nations");

                    b.Property<string>("Continent")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Name of the continent");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Name of the country");

                    b.Property<string>("CountryType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Type of country or administrative region");

                    b.Property<string>("FormalName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Full formal name of the country as agreed by United Nations");

                    b.Property<string>("IsoAlpha3Code")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasComment("3 letter alphabetic code assigned to the country by ISO");

                    b.Property<int?>("IsoNumericCode")
                        .HasColumnType("int")
                        .HasComment("Numeric code assigned to the country by ISO");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<long?>("LatestRecordedPopulation")
                        .HasColumnType("bigint")
                        .HasComment("Latest available population for the country");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Name of the region");

                    b.Property<string>("Subregion")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Name of the subregion");

                    b.Property<DateTime>("ValidFrom")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidFrom");

                    b.Property<DateTime>("ValidTo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidTo");

                    b.HasKey("CountryId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "CountryName" }, "UQ_Application_Countries_CountryName")
                        .IsUnique();

                    b.HasIndex(new[] { "FormalName" }, "UQ_Application_Countries_FormalName")
                        .IsUnique();

                    b.ToTable("Countries", "Application");

                    b
                        .HasComment("Countries that contain the states or provinces (including geographic boundaries)")
                        .ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("Countries_Archive", "Application");
                            ttb
                                .HasPeriodStart("ValidFrom")
                                .HasColumnName("ValidFrom");
                            ttb
                                .HasPeriodEnd("ValidTo")
                                .HasColumnName("ValidTo");
                        }
                    ));
                });

            modelBuilder.Entity("wwimporters.domain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[CustomerID])")
                        .HasComment("Numeric ID used for reference to a customer within the database");

                    b.Property<DateTime>("AccountOpenedDate")
                        .HasColumnType("date")
                        .HasComment("Date this customer account was opened");

                    b.Property<int?>("AlternateContactPersonId")
                        .HasColumnType("int")
                        .HasColumnName("AlternateContactPersonID")
                        .HasComment("Alternate contact");

                    b.Property<int>("BillToCustomerId")
                        .HasColumnType("int")
                        .HasColumnName("BillToCustomerID")
                        .HasComment("Customer that this is billed to (usually the same customer but can be another parent company)");

                    b.Property<int?>("BuyingGroupId")
                        .HasColumnType("int")
                        .HasColumnName("BuyingGroupID")
                        .HasComment("Customer's buying group (optional)");

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Credit limit for this customer (NULL if unlimited)");

                    b.Property<int>("CustomerCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerCategoryID")
                        .HasComment("Customer's category");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Customer's full name (usually a trading name)");

                    b.Property<string>("DeliveryAddressLine1")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("First delivery address line for the customer");

                    b.Property<string>("DeliveryAddressLine2")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Second delivery address line for the customer");

                    b.Property<int>("DeliveryCityId")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryCityID")
                        .HasComment("ID of the delivery city for this address");

                    b.Property<Geometry>("DeliveryLocation")
                        .HasColumnType("geography")
                        .HasComment("Geographic location for the customer's office/warehouse");

                    b.Property<int>("DeliveryMethodId")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryMethodID")
                        .HasComment("Standard delivery method for stock items sent to this customer");

                    b.Property<string>("DeliveryPostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Delivery postal code for the customer");

                    b.Property<string>("DeliveryRun")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("Normal delivery run for this customer");

                    b.Property<string>("FaxNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Fax number");

                    b.Property<bool>("IsOnCreditHold")
                        .HasColumnType("bit")
                        .HasComment("Is this customer on credit hold? (Prevents further deliveries to this customer)");

                    b.Property<bool>("IsStatementSent")
                        .HasColumnType("bit")
                        .HasComment("Is a statement sent to this customer? (Or do they just pay on each invoice?)");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("PaymentDays")
                        .HasColumnType("int")
                        .HasComment("Number of days for payment of an invoice (ie payment terms)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Phone number");

                    b.Property<string>("PostalAddressLine1")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("First postal address line for the customer");

                    b.Property<string>("PostalAddressLine2")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Second postal address line for the customer");

                    b.Property<int>("PostalCityId")
                        .HasColumnType("int")
                        .HasColumnName("PostalCityID")
                        .HasComment("ID of the postal city for this address");

                    b.Property<string>("PostalPostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Postal code for the customer when sending by mail");

                    b.Property<int>("PrimaryContactPersonId")
                        .HasColumnType("int")
                        .HasColumnName("PrimaryContactPersonID")
                        .HasComment("Primary contact");

                    b.Property<string>("RunPosition")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("Normal position in the delivery run for this customer");

                    b.Property<decimal>("StandardDiscountPercentage")
                        .HasColumnType("decimal(18,3)")
                        .HasComment("Standard discount offered to this customer");

                    b.Property<DateTime>("ValidFrom")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidFrom");

                    b.Property<DateTime>("ValidTo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidTo");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("WebsiteURL")
                        .HasComment("URL for the website for this customer");

                    b.HasKey("CustomerId");

                    b.HasIndex("BillToCustomerId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "AlternateContactPersonId" }, "FK_Sales_Customers_AlternateContactPersonID");

                    b.HasIndex(new[] { "BuyingGroupId" }, "FK_Sales_Customers_BuyingGroupID");

                    b.HasIndex(new[] { "CustomerCategoryId" }, "FK_Sales_Customers_CustomerCategoryID");

                    b.HasIndex(new[] { "DeliveryCityId" }, "FK_Sales_Customers_DeliveryCityID");

                    b.HasIndex(new[] { "DeliveryMethodId" }, "FK_Sales_Customers_DeliveryMethodID");

                    b.HasIndex(new[] { "PostalCityId" }, "FK_Sales_Customers_PostalCityID");

                    b.HasIndex(new[] { "PrimaryContactPersonId" }, "FK_Sales_Customers_PrimaryContactPersonID");

                    b.HasIndex(new[] { "IsOnCreditHold", "CustomerId", "BillToCustomerId" }, "IX_Sales_Customers_Perf_20160301_06");

                    b.HasIndex(new[] { "CustomerName" }, "UQ_Sales_Customers_CustomerName")
                        .IsUnique();

                    b.ToTable("Customers", "Sales");

                    b
                        .HasComment("Main entity tables for customers (organizations or individuals)")
                        .ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("Customers_Archive", "Sales");
                            ttb
                                .HasPeriodStart("ValidFrom")
                                .HasColumnName("ValidFrom");
                            ttb
                                .HasPeriodEnd("ValidTo")
                                .HasColumnName("ValidTo");
                        }
                    ));
                });

            modelBuilder.Entity("wwimporters.domain.Entities.Customer1", b =>
                {
                    b.Property<string>("AlternateContact")
                        .HasMaxLength(58)
                        .HasColumnType("nvarchar(58)");

                    b.Property<string>("BuyingGroupName")
                        .HasMaxLength(58)
                        .HasColumnType("nvarchar(58)");

                    b.Property<string>("CityName")
                        .HasMaxLength(58)
                        .HasColumnType("nvarchar(58)");

                    b.Property<string>("CustomerCategoryName")
                        .HasMaxLength(58)
                        .HasColumnType("nvarchar(58)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(107)
                        .HasColumnType("nvarchar(107)");

                    b.Property<Geometry>("DeliveryLocation")
                        .HasColumnType("geography");

                    b.Property<string>("DeliveryMethod")
                        .HasMaxLength(58)
                        .HasColumnType("nvarchar(58)");

                    b.Property<string>("DeliveryRun")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("FaxNumber")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("nvarchar(28)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("nvarchar(28)");

                    b.Property<string>("PrimaryContact")
                        .HasMaxLength(58)
                        .HasColumnType("nvarchar(58)");

                    b.Property<string>("RunPosition")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasMaxLength(264)
                        .HasColumnType("nvarchar(264)")
                        .HasColumnName("WebsiteURL");

                    b.ToView("Customers", "Website");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.CustomerCategory", b =>
                {
                    b.Property<int>("CustomerCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerCategoryID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[CustomerCategoryID])")
                        .HasComment("Numeric ID used for reference to a customer category within the database");

                    b.Property<string>("CustomerCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Full name of the category that customers can be assigned to");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidFrom");

                    b.Property<DateTime>("ValidTo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidTo");

                    b.HasKey("CustomerCategoryId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "CustomerCategoryName" }, "UQ_Sales_CustomerCategories_CustomerCategoryName")
                        .IsUnique();

                    b.ToTable("CustomerCategories", "Sales");

                    b
                        .HasComment("Categories for customers (ie restaurants, cafes, supermarkets, etc.)")
                        .ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("CustomerCategories_Archive", "Sales");
                            ttb
                                .HasPeriodStart("ValidFrom")
                                .HasColumnName("ValidFrom");
                            ttb
                                .HasPeriodEnd("ValidTo")
                                .HasColumnName("ValidTo");
                        }
                    ));
                });

            modelBuilder.Entity("wwimporters.domain.Entities.CustomerTransaction", b =>
                {
                    b.Property<int>("CustomerTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerTransactionID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[TransactionID])")
                        .HasComment("Numeric ID used to refer to a customer transaction within the database");

                    b.Property<decimal>("AmountExcludingTax")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Transaction amount (excluding tax)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID")
                        .HasComment("Customer for this transaction");

                    b.Property<DateTime?>("FinalizationDate")
                        .HasColumnType("date")
                        .HasComment("Date that this transaction was finalized (if it has been)");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID")
                        .HasComment("ID of an invoice (for transactions associated with an invoice)");

                    b.Property<bool?>("IsFinalized")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit")
                        .HasComputedColumnSql("(case when [FinalizationDate] IS NULL then CONVERT([bit],(0)) else CONVERT([bit],(1)) end)", true)
                        .HasComment("Is this transaction finalized (invoices, credits and payments have been matched)");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<decimal>("OutstandingBalance")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Amount still outstanding for this transaction");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentMethodID")
                        .HasComment("ID of a payment method (for transactions involving payments)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Tax amount calculated");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Transaction amount (including tax)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("date")
                        .HasComment("Date for the transaction");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionTypeID")
                        .HasComment("Type of transaction");

                    b.HasKey("CustomerTransactionId")
                        .HasName("PK_Sales_CustomerTransactions");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("CustomerTransactionId"), false);

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("TransactionTypeId");

                    b.HasIndex(new[] { "TransactionDate" }, "CX_Sales_CustomerTransactions");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "TransactionDate" }, "CX_Sales_CustomerTransactions"));

                    b.HasIndex(new[] { "TransactionDate", "CustomerId" }, "FK_Sales_CustomerTransactions_CustomerID");

                    b.HasIndex(new[] { "TransactionDate", "InvoiceId" }, "FK_Sales_CustomerTransactions_InvoiceID");

                    b.HasIndex(new[] { "TransactionDate", "PaymentMethodId" }, "FK_Sales_CustomerTransactions_PaymentMethodID");

                    b.HasIndex(new[] { "TransactionDate", "TransactionTypeId" }, "FK_Sales_CustomerTransactions_TransactionTypeID");

                    b.HasIndex(new[] { "TransactionDate", "IsFinalized" }, "IX_Sales_CustomerTransactions_IsFinalized");

                    b.ToTable("CustomerTransactions", "Sales");

                    b.HasComment("All financial transactions that are customer-related");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.DeliveryMethod", b =>
                {
                    b.Property<int>("DeliveryMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DeliveryMethodID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[DeliveryMethodID])")
                        .HasComment("Numeric ID used for reference to a delivery method within the database");

                    b.Property<string>("DeliveryMethodName")
                        .IsRequired()
                        .HasMaxLength(58)
                        .HasColumnType("nvarchar(58)")
                        .HasComment("Full name of methods that can be used for delivery of customer orders");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidFrom");

                    b.Property<DateTime>("ValidTo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidTo");

                    b.HasKey("DeliveryMethodId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "DeliveryMethodName" }, "UQ_Application_DeliveryMethods_DeliveryMethodName")
                        .IsUnique();

                    b.ToTable("DeliveryMethods", "Application");

                    b
                        .HasComment("Ways that stock items can be delivered (ie: truck/van, post, pickup, courier, etc.")
                        .ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("DeliveryMethods_Archive", "Application");
                            ttb
                                .HasPeriodStart("ValidFrom")
                                .HasColumnName("ValidFrom");
                            ttb
                                .HasPeriodEnd("ValidTo")
                                .HasColumnName("ValidTo");
                        }
                    ));
                });

            modelBuilder.Entity("wwimporters.domain.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[InvoiceID])")
                        .HasComment("Numeric ID used for reference to an invoice within the database");

                    b.Property<int>("AccountsPersonId")
                        .HasColumnType("int")
                        .HasColumnName("AccountsPersonID")
                        .HasComment("Customer accounts contact for this invoice");

                    b.Property<int>("BillToCustomerId")
                        .HasColumnType("int")
                        .HasColumnName("BillToCustomerID")
                        .HasComment("Bill to customer for this invoice (invoices might be billed to a head office)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Any comments related to this invoice (sent to customer)");

                    b.Property<DateTime?>("ConfirmedDeliveryTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("(TRY_CONVERT([datetime2](7),json_value([ReturnedDeliveryData],N'$.DeliveredWhen'),(126)))", false)
                        .HasComment("Confirmed delivery date and time promoted from JSON delivery data");

                    b.Property<string>("ConfirmedReceivedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComputedColumnSql("(json_value([ReturnedDeliveryData],N'$.ReceivedBy'))", false)
                        .HasComment("Confirmed receiver promoted from JSON delivery data");

                    b.Property<int>("ContactPersonId")
                        .HasColumnType("int")
                        .HasColumnName("ContactPersonID")
                        .HasComment("Customer contact for this invoice");

                    b.Property<string>("CreditNoteReason")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Reason that this credit note needed to be generated (if applicable)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID")
                        .HasComment("Customer for this invoice");

                    b.Property<string>("CustomerPurchaseOrderNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Purchase Order Number received from customer");

                    b.Property<string>("DeliveryInstructions")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Any comments related to delivery (sent to customer)");

                    b.Property<int>("DeliveryMethodId")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryMethodID")
                        .HasComment("How these stock items are beign delivered");

                    b.Property<string>("DeliveryRun")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("Delivery run for this shipment");

                    b.Property<string>("InternalComments")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Any internal comments related to this invoice (not sent to the customer)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("date")
                        .HasComment("Date that this invoice was raised");

                    b.Property<bool>("IsCreditNote")
                        .HasColumnType("bit")
                        .HasComment("Is this a credit note (rather than an invoice)");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID")
                        .HasComment("Sales order (if any) for this invoice");

                    b.Property<int>("PackedByPersonId")
                        .HasColumnType("int")
                        .HasColumnName("PackedByPersonID")
                        .HasComment("Person who packed this shipment (or checked the packing)");

                    b.Property<string>("ReturnedDeliveryData")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("JSON-structured data returned from delivery devices for deliveries made directly by the organization");

                    b.Property<string>("RunPosition")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("Position in the delivery run for this shipment");

                    b.Property<int>("SalespersonPersonId")
                        .HasColumnType("int")
                        .HasColumnName("SalespersonPersonID")
                        .HasComment("Salesperson for this invoice");

                    b.Property<int>("TotalChillerItems")
                        .HasColumnType("int")
                        .HasComment("Total number of chiller packages (information for the delivery driver)");

                    b.Property<int>("TotalDryItems")
                        .HasColumnType("int")
                        .HasComment("Total number of dry packages (information for the delivery driver)");

                    b.HasKey("InvoiceId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "AccountsPersonId" }, "FK_Sales_Invoices_AccountsPersonID");

                    b.HasIndex(new[] { "BillToCustomerId" }, "FK_Sales_Invoices_BillToCustomerID");

                    b.HasIndex(new[] { "ContactPersonId" }, "FK_Sales_Invoices_ContactPersonID");

                    b.HasIndex(new[] { "CustomerId" }, "FK_Sales_Invoices_CustomerID");

                    b.HasIndex(new[] { "DeliveryMethodId" }, "FK_Sales_Invoices_DeliveryMethodID");

                    b.HasIndex(new[] { "OrderId" }, "FK_Sales_Invoices_OrderID");

                    b.HasIndex(new[] { "PackedByPersonId" }, "FK_Sales_Invoices_PackedByPersonID");

                    b.HasIndex(new[] { "SalespersonPersonId" }, "FK_Sales_Invoices_SalespersonPersonID");

                    b.HasIndex(new[] { "ConfirmedDeliveryTime" }, "IX_Sales_Invoices_ConfirmedDeliveryTime");

                    b.ToTable("Invoices", "Sales");

                    b.HasComment("Details of customer invoices");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.InvoiceLine", b =>
                {
                    b.Property<int>("InvoiceLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvoiceLineID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[InvoiceLineID])")
                        .HasComment("Numeric ID used for reference to a line on an invoice within the database");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Description of the item supplied (Usually the stock item name but can be overridden)");

                    b.Property<decimal>("ExtendedPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Extended line price charged");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID")
                        .HasComment("Invoice that this line is associated with");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<decimal>("LineProfit")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Profit made on this line item at current cost price");

                    b.Property<int>("PackageTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PackageTypeID")
                        .HasComment("Type of package supplied");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity supplied");

                    b.Property<int>("StockItemId")
                        .HasColumnType("int")
                        .HasColumnName("StockItemID")
                        .HasComment("Stock item for this invoice line");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Tax amount calculated");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18,3)")
                        .HasComment("Tax rate to be applied");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Unit price charged");

                    b.HasKey("InvoiceLineId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "InvoiceId" }, "FK_Sales_InvoiceLines_InvoiceID");

                    b.HasIndex(new[] { "PackageTypeId" }, "FK_Sales_InvoiceLines_PackageTypeID");

                    b.HasIndex(new[] { "StockItemId" }, "FK_Sales_InvoiceLines_StockItemID");

                    b.ToTable("InvoiceLines", "Sales");

                    b.HasComment("Detail lines from customer invoices");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[OrderID])")
                        .HasComment("Numeric ID used for reference to an order within the database");

                    b.Property<int?>("BackorderOrderId")
                        .HasColumnType("int")
                        .HasColumnName("BackorderOrderID")
                        .HasComment("If this order is a backorder, this column holds the original order number");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Any comments related to this order (sent to customer)");

                    b.Property<int>("ContactPersonId")
                        .HasColumnType("int")
                        .HasColumnName("ContactPersonID")
                        .HasComment("Customer contact for this order");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID")
                        .HasComment("Customer for this order");

                    b.Property<string>("CustomerPurchaseOrderNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Purchase Order Number received from customer");

                    b.Property<string>("DeliveryInstructions")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("	Any comments related to order delivery (sent to customer)");

                    b.Property<DateTime>("ExpectedDeliveryDate")
                        .HasColumnType("date")
                        .HasComment("Expected delivery date");

                    b.Property<string>("InternalComments")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Any internal comments related to this order (not sent to the customer)");

                    b.Property<bool>("IsUndersupplyBackordered")
                        .HasColumnType("bit")
                        .HasComment("If items cannot be supplied are they backordered?");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("date")
                        .HasComment("Date that this order was raised");

                    b.Property<int?>("PickedByPersonId")
                        .HasColumnType("int")
                        .HasColumnName("PickedByPersonID")
                        .HasComment("Person who picked this shipment");

                    b.Property<DateTime?>("PickingCompletedWhen")
                        .HasColumnType("datetime2")
                        .HasComment("When was picking of the entire order completed?");

                    b.Property<int>("SalespersonPersonId")
                        .HasColumnType("int")
                        .HasColumnName("SalespersonPersonID")
                        .HasComment("Salesperson for this order");

                    b.HasKey("OrderId");

                    b.HasIndex("BackorderOrderId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "ContactPersonId" }, "FK_Sales_Orders_ContactPersonID");

                    b.HasIndex(new[] { "CustomerId" }, "FK_Sales_Orders_CustomerID");

                    b.HasIndex(new[] { "PickedByPersonId" }, "FK_Sales_Orders_PickedByPersonID");

                    b.HasIndex(new[] { "SalespersonPersonId" }, "FK_Sales_Orders_SalespersonPersonID");

                    b.ToTable("Orders", "Sales");

                    b.HasComment("Detail of customer orders");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.OrderLine", b =>
                {
                    b.Property<int>("OrderLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderLineID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[OrderLineID])")
                        .HasComment("Numeric ID used for reference to a line on an Order within the database");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Description of the item supplied (Usually the stock item name but can be overridden)");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID")
                        .HasComment("Order that this line is associated with");

                    b.Property<int>("PackageTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PackageTypeID")
                        .HasComment("Type of package to be supplied");

                    b.Property<int>("PickedQuantity")
                        .HasColumnType("int")
                        .HasComment("Quantity picked from stock");

                    b.Property<DateTime?>("PickingCompletedWhen")
                        .HasColumnType("datetime2")
                        .HasComment("When was picking of this line completed?");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity to be supplied");

                    b.Property<int>("StockItemId")
                        .HasColumnType("int")
                        .HasColumnName("StockItemID")
                        .HasComment("Stock item for this order line (FK not indexed as separate index exists)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18,3)")
                        .HasComment("Tax rate to be applied");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Unit price to be charged");

                    b.HasKey("OrderLineId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "OrderId" }, "FK_Sales_OrderLines_OrderID");

                    b.HasIndex(new[] { "PackageTypeId" }, "FK_Sales_OrderLines_PackageTypeID");

                    b.HasIndex(new[] { "StockItemId" }, "IX_Sales_OrderLines_AllocatedStockItems");

                    b.HasIndex(new[] { "PickingCompletedWhen", "OrderId", "OrderLineId" }, "IX_Sales_OrderLines_Perf_20160301_01");

                    b.HasIndex(new[] { "StockItemId", "PickingCompletedWhen" }, "IX_Sales_OrderLines_Perf_20160301_02");

                    b.ToTable("OrderLines", "Sales");

                    b.HasComment("Detail lines from customer orders");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.PackageType", b =>
                {
                    b.Property<int>("PackageTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PackageTypeID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[PackageTypeID])")
                        .HasComment("Numeric ID used for reference to a package type within the database");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<string>("PackageTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Full name of package types that stock items can be purchased in or sold in");

                    b.Property<DateTime>("ValidFrom")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidFrom");

                    b.Property<DateTime>("ValidTo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidTo");

                    b.HasKey("PackageTypeId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "PackageTypeName" }, "UQ_Warehouse_PackageTypes_PackageTypeName")
                        .IsUnique();

                    b.ToTable("PackageTypes", "Warehouse");

                    b
                        .HasComment("Ways that stock items can be packaged (ie: each, box, carton, pallet, kg, etc.")
                        .ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("PackageTypes_Archive", "Warehouse");
                            ttb
                                .HasPeriodStart("ValidFrom")
                                .HasColumnName("ValidFrom");
                            ttb
                                .HasPeriodEnd("ValidTo")
                                .HasColumnName("ValidTo");
                        }
                    ));
                });

            modelBuilder.Entity("wwimporters.domain.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentMethodID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[PaymentMethodID])")
                        .HasComment("Numeric ID used for reference to a payment type within the database");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasMaxLength(58)
                        .HasColumnType("nvarchar(58)")
                        .HasComment("Full name of ways that customers can make payments or that suppliers can be paid");

                    b.Property<DateTime>("ValidFrom")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidFrom");

                    b.Property<DateTime>("ValidTo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidTo");

                    b.HasKey("PaymentMethodId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "PaymentMethodName" }, "UQ_Application_PaymentMethods_PaymentMethodName")
                        .IsUnique();

                    b.ToTable("PaymentMethods", "Application");

                    b
                        .HasComment("Ways that payments can be made (ie: cash, check, EFT, etc.")
                        .ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("PaymentMethods_Archive", "Application");
                            ttb
                                .HasPeriodStart("ValidFrom")
                                .HasColumnName("ValidFrom");
                            ttb
                                .HasPeriodEnd("ValidTo")
                                .HasColumnName("ValidTo");
                        }
                    ));
                });

            modelBuilder.Entity("wwimporters.domain.Entities.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[PersonID])")
                        .HasComment("Numeric ID used for reference to a person within the database");

                    b.Property<string>("CustomFields")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Custom fields for employees and salespeople");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(264)
                        .HasColumnType("nvarchar(264)")
                        .HasComment("Email address for this person");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(28)
                        .HasColumnType("nvarchar(28)")
                        .HasComment("Fax number");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(58)
                        .HasColumnType("nvarchar(58)")
                        .HasComment("Full name for this person");

                    b.Property<byte[]>("HashedPassword")
                        .HasColumnType("varbinary(max)")
                        .HasComment("Hash of password for users without external logon tokens");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit")
                        .HasComment("Is this person an employee?");

                    b.Property<bool>("IsExternalLogonProvider")
                        .HasColumnType("bit")
                        .HasComment("Is logon token provided by an external system?");

                    b.Property<bool>("IsPermittedToLogon")
                        .HasColumnType("bit")
                        .HasComment("Is this person permitted to log on?");

                    b.Property<bool>("IsSalesperson")
                        .HasColumnType("bit")
                        .HasComment("Is this person a staff salesperson?");

                    b.Property<bool>("IsSystemUser")
                        .HasColumnType("bit")
                        .HasComment("Is the currently permitted to make online access?");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<string>("LogonName")
                        .HasMaxLength(58)
                        .HasColumnType("nvarchar(58)")
                        .HasComment("Person's system logon name");

                    b.Property<string>("OtherLanguages")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("(json_query([CustomFields],N'$.OtherLanguages'))", false)
                        .HasComment("Other languages spoken (computed column from custom fields)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(28)
                        .HasColumnType("nvarchar(28)")
                        .HasComment("Phone number");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)")
                        .HasComment("Photo of this person");

                    b.Property<string>("PreferredName")
                        .IsRequired()
                        .HasMaxLength(58)
                        .HasColumnType("nvarchar(58)")
                        .HasComment("Name that this person prefers to be called");

                    b.Property<string>("SearchName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(107)
                        .HasColumnType("nvarchar(107)")
                        .HasComputedColumnSql("(concat([PreferredName],N' ',[FullName]))", true)
                        .HasComment("Name to build full text search on (computed column)");

                    b.Property<string>("UserPreferences")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("User preferences related to the website (holds JSON data)");

                    b.Property<DateTime>("ValidFrom")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidFrom");

                    b.Property<DateTime>("ValidTo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidTo");

                    b.HasKey("PersonId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "FullName" }, "IX_Application_People_FullName");

                    b.HasIndex(new[] { "IsEmployee" }, "IX_Application_People_IsEmployee");

                    b.HasIndex(new[] { "IsSalesperson" }, "IX_Application_People_IsSalesperson");

                    b.HasIndex(new[] { "IsPermittedToLogon", "PersonId" }, "IX_Application_People_Perf_20160301_05");

                    b.ToTable("People", "Application");

                    b
                        .HasComment("People known to the application (staff, customer contacts, supplier contacts)")
                        .ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("People_Archive", "Application");
                            ttb
                                .HasPeriodStart("ValidFrom")
                                .HasColumnName("ValidFrom");
                            ttb
                                .HasPeriodEnd("ValidTo")
                                .HasColumnName("ValidTo");
                        }
                    ));
                });

            modelBuilder.Entity("wwimporters.domain.Entities.PurchaseOrder", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PurchaseOrderID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[PurchaseOrderID])")
                        .HasComment("Numeric ID used for reference to a purchase order within the database");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Any comments related this purchase order (comments sent to the supplier)");

                    b.Property<int>("ContactPersonId")
                        .HasColumnType("int")
                        .HasColumnName("ContactPersonID")
                        .HasComment("The person who is the primary contact for this purchase order");

                    b.Property<int>("DeliveryMethodId")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryMethodID")
                        .HasComment("How this purchase order should be delivered");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("date")
                        .HasComment("Expected delivery date for this purchase order");

                    b.Property<string>("InternalComments")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Any internal comments related this purchase order (comments for internal reference only and not sent to the supplier)");

                    b.Property<bool>("IsOrderFinalized")
                        .HasColumnType("bit")
                        .HasComment("Is this purchase order now considered finalized?");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("date")
                        .HasComment("Date that this purchase order was raised");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID")
                        .HasComment("Supplier for this purchase order");

                    b.Property<string>("SupplierReference")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Supplier reference for our organization (might be our account number at the supplier)");

                    b.HasKey("PurchaseOrderId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "ContactPersonId" }, "FK_Purchasing_PurchaseOrders_ContactPersonID");

                    b.HasIndex(new[] { "DeliveryMethodId" }, "FK_Purchasing_PurchaseOrders_DeliveryMethodID");

                    b.HasIndex(new[] { "SupplierId" }, "FK_Purchasing_PurchaseOrders_SupplierID");

                    b.ToTable("PurchaseOrders", "Purchasing");

                    b.HasComment("Details of supplier purchase orders");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.PurchaseOrderLine", b =>
                {
                    b.Property<int>("PurchaseOrderLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PurchaseOrderLineID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[PurchaseOrderLineID])")
                        .HasComment("Numeric ID used for reference to a line on a purchase order within the database");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Description of the item to be supplied (Often the stock item name but could be supplier description)");

                    b.Property<decimal?>("ExpectedUnitPricePerOuter")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The unit price that we expect to be charged");

                    b.Property<bool>("IsOrderLineFinalized")
                        .HasColumnType("bit")
                        .HasComment("Is this purchase order line now considered finalized? (Receipted quantities and weights are often not precise)");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime?>("LastReceiptDate")
                        .HasColumnType("date")
                        .HasComment("The last date on which this stock item was received for this purchase order");

                    b.Property<int>("OrderedOuters")
                        .HasColumnType("int")
                        .HasComment("Quantity of the stock item that is ordered");

                    b.Property<int>("PackageTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PackageTypeID")
                        .HasComment("Type of package received");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int")
                        .HasColumnName("PurchaseOrderID")
                        .HasComment("Purchase order that this line is associated with");

                    b.Property<int>("ReceivedOuters")
                        .HasColumnType("int")
                        .HasComment("Total quantity of the stock item that has been received so far");

                    b.Property<int>("StockItemId")
                        .HasColumnType("int")
                        .HasColumnName("StockItemID")
                        .HasComment("Stock item for this purchase order line");

                    b.HasKey("PurchaseOrderLineId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "PackageTypeId" }, "FK_Purchasing_PurchaseOrderLines_PackageTypeID");

                    b.HasIndex(new[] { "PurchaseOrderId" }, "FK_Purchasing_PurchaseOrderLines_PurchaseOrderID");

                    b.HasIndex(new[] { "StockItemId" }, "FK_Purchasing_PurchaseOrderLines_StockItemID");

                    b.HasIndex(new[] { "IsOrderLineFinalized", "StockItemId" }, "IX_Purchasing_PurchaseOrderLines_Perf_20160301_4");

                    b.ToTable("PurchaseOrderLines", "Purchasing");

                    b.HasComment("Detail lines from supplier purchase orders");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.SpecialDeal", b =>
                {
                    b.Property<int>("SpecialDealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SpecialDealID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[SpecialDealID])")
                        .HasComment("ID (sequence based) for a special deal");

                    b.Property<int?>("BuyingGroupId")
                        .HasColumnType("int")
                        .HasColumnName("BuyingGroupID")
                        .HasComment("ID of the buying group that the special pricing applies to (optional)");

                    b.Property<int?>("CustomerCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerCategoryID")
                        .HasComment("ID of the customer category that the special pricing applies to (optional)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID")
                        .HasComment("ID of the customer that the special pricing applies to (if NULL then all customers)");

                    b.Property<string>("DealDescription")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Description of the special deal");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Discount per unit to be applied to sale price (optional)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(18,3)")
                        .HasComment("	Discount percentage per unit to be applied to sale price (optional)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date")
                        .HasComment("Date that the special pricing ends on");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasComment("Date that the special pricing starts from");

                    b.Property<int?>("StockGroupId")
                        .HasColumnType("int")
                        .HasColumnName("StockGroupID")
                        .HasComment("ID of the stock group that the special pricing applies to (optional)");

                    b.Property<int?>("StockItemId")
                        .HasColumnType("int")
                        .HasColumnName("StockItemID")
                        .HasComment("Stock item that the deal applies to (if NULL, then only discounts are permitted not unit prices)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Special price per unit to be applied instead of sale price (optional)");

                    b.HasKey("SpecialDealId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "BuyingGroupId" }, "FK_Sales_SpecialDeals_BuyingGroupID");

                    b.HasIndex(new[] { "CustomerCategoryId" }, "FK_Sales_SpecialDeals_CustomerCategoryID");

                    b.HasIndex(new[] { "CustomerId" }, "FK_Sales_SpecialDeals_CustomerID");

                    b.HasIndex(new[] { "StockGroupId" }, "FK_Sales_SpecialDeals_StockGroupID");

                    b.HasIndex(new[] { "StockItemId" }, "FK_Sales_SpecialDeals_StockItemID");

                    b.ToTable("SpecialDeals", "Sales");

                    b.HasComment("Special pricing (can include fixed prices, discount $ or discount %)");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.StateProvince", b =>
                {
                    b.Property<int>("StateProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StateProvinceID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[StateProvinceID])")
                        .HasComment("Numeric ID used for reference to a state or province within the database");

                    b.Property<Geometry>("Border")
                        .HasColumnType("geography")
                        .HasComment("Geographic boundary of the state or province");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID")
                        .HasComment("Country for this StateProvince");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<long?>("LatestRecordedPopulation")
                        .HasColumnType("bigint")
                        .HasComment("Latest available population for the StateProvince");

                    b.Property<string>("SalesTerritory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Sales territory for this StateProvince");

                    b.Property<string>("StateProvinceCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("Common code for this state or province (such as WA - Washington for the USA)");

                    b.Property<string>("StateProvinceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Formal name of the state or province");

                    b.Property<DateTime>("ValidFrom")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidFrom");

                    b.Property<DateTime>("ValidTo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidTo");

                    b.HasKey("StateProvinceId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "CountryId" }, "FK_Application_StateProvinces_CountryID");

                    b.HasIndex(new[] { "SalesTerritory" }, "IX_Application_StateProvinces_SalesTerritory");

                    b.HasIndex(new[] { "StateProvinceName" }, "UQ_Application_StateProvinces_StateProvinceName")
                        .IsUnique();

                    b.ToTable("StateProvinces", "Application");

                    b
                        .HasComment("States or provinces that contain cities (including geographic location)")
                        .ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("StateProvinces_Archive", "Application");
                            ttb
                                .HasPeriodStart("ValidFrom")
                                .HasColumnName("ValidFrom");
                            ttb
                                .HasPeriodEnd("ValidTo")
                                .HasColumnName("ValidTo");
                        }
                    ));
                });

            modelBuilder.Entity("wwimporters.domain.Entities.StockGroup", b =>
                {
                    b.Property<int>("StockGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StockGroupID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[StockGroupID])")
                        .HasComment("Numeric ID used for reference to a stock group within the database");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<string>("StockGroupName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Full name of groups used to categorize stock items");

                    b.Property<DateTime>("ValidFrom")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidFrom");

                    b.Property<DateTime>("ValidTo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidTo");

                    b.HasKey("StockGroupId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "StockGroupName" }, "UQ_Warehouse_StockGroups_StockGroupName")
                        .IsUnique();

                    b.ToTable("StockGroups", "Warehouse");

                    b
                        .HasComment("Groups for categorizing stock items (ie: novelties, toys, edible novelties, etc.)")
                        .ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("StockGroups_Archive", "Warehouse");
                            ttb
                                .HasPeriodStart("ValidFrom")
                                .HasColumnName("ValidFrom");
                            ttb
                                .HasPeriodEnd("ValidTo")
                                .HasColumnName("ValidTo");
                        }
                    ));
                });

            modelBuilder.Entity("wwimporters.domain.Entities.StockItem", b =>
                {
                    b.Property<int>("StockItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StockItemID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[StockItemID])")
                        .HasComment("Numeric ID used for reference to a stock item within the database");

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Barcode for this stock item");

                    b.Property<string>("Brand")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Brand for the stock item (if the item is branded)");

                    b.Property<int?>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("ColorID")
                        .HasComment("Color (optional) for this stock item");

                    b.Property<string>("CustomFields")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Custom fields added by system users");

                    b.Property<string>("InternalComments")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Internal comments (not exposed outside organization)");

                    b.Property<bool>("IsChillerStock")
                        .HasColumnType("bit")
                        .HasComment("Does this stock item need to be in a chiller?");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LeadTimeDays")
                        .HasColumnType("int")
                        .HasComment("Number of days typically taken from order to receipt of this stock item");

                    b.Property<string>("MarketingComments")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Marketing comments for this stock item (shared outside the organization)");

                    b.Property<int>("OuterPackageId")
                        .HasColumnType("int")
                        .HasColumnName("OuterPackageID")
                        .HasComment("Usual package for selling outers of this stock item (ie cartons, boxes, etc.)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)")
                        .HasComment("Photo of the product");

                    b.Property<int>("QuantityPerOuter")
                        .HasColumnType("int")
                        .HasComment("Quantity of the stock item in an outer package");

                    b.Property<decimal?>("RecommendedRetailPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Recommended retail price for this stock item");

                    b.Property<string>("SearchDetails")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("(concat([StockItemName],N' ',[MarketingComments]))", false)
                        .HasComment("Combination of columns used by full text search");

                    b.Property<string>("Size")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Size of this item (eg: 100mm)");

                    b.Property<string>("StockItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Full name of a stock item (but not a full description)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID")
                        .HasComment("Usual supplier for this stock item");

                    b.Property<string>("Tags")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("(json_query([CustomFields],N'$.Tags'))", false)
                        .HasComment("Advertising tags associated with this stock item (JSON array retrieved from CustomFields)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18,3)")
                        .HasComment("Tax rate to be applied");

                    b.Property<decimal>("TypicalWeightPerUnit")
                        .HasColumnType("decimal(18,3)")
                        .HasComment("Typical weight for one unit of this product (packaged)");

                    b.Property<int>("UnitPackageId")
                        .HasColumnType("int")
                        .HasColumnName("UnitPackageID")
                        .HasComment("Usual package for selling units of this stock item");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Selling price (ex-tax) for one unit of this product");

                    b.Property<DateTime>("ValidFrom")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidFrom");

                    b.Property<DateTime>("ValidTo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidTo");

                    b.HasKey("StockItemId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "ColorId" }, "FK_Warehouse_StockItems_ColorID");

                    b.HasIndex(new[] { "OuterPackageId" }, "FK_Warehouse_StockItems_OuterPackageID");

                    b.HasIndex(new[] { "SupplierId" }, "FK_Warehouse_StockItems_SupplierID");

                    b.HasIndex(new[] { "UnitPackageId" }, "FK_Warehouse_StockItems_UnitPackageID");

                    b.HasIndex(new[] { "StockItemName" }, "UQ_Warehouse_StockItems_StockItemName")
                        .IsUnique();

                    b.ToTable("StockItems", "Warehouse");

                    b
                        .HasComment("Main entity table for stock items")
                        .ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("StockItems_Archive", "Warehouse");
                            ttb
                                .HasPeriodStart("ValidFrom")
                                .HasColumnName("ValidFrom");
                            ttb
                                .HasPeriodEnd("ValidTo")
                                .HasColumnName("ValidTo");
                        }
                    ));
                });

            modelBuilder.Entity("wwimporters.domain.Entities.StockItemHolding", b =>
                {
                    b.Property<int>("StockItemId")
                        .HasColumnType("int")
                        .HasColumnName("StockItemID")
                        .HasComment("ID of the stock item that this holding relates to (this table holds non-temporal columns for stock)");

                    b.Property<string>("BinLocation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Bin location (ie location of this stock item within the depot)");

                    b.Property<decimal>("LastCostPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Unit cost price the last time this stock item was purchased");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("LastStocktakeQuantity")
                        .HasColumnType("int")
                        .HasComment("Quantity at last stocktake (if tracked)");

                    b.Property<int>("QuantityOnHand")
                        .HasColumnType("int")
                        .HasComment("Quantity currently on hand (if tracked)");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("int")
                        .HasComment("Quantity below which reordering should take place");

                    b.Property<int>("TargetStockLevel")
                        .HasColumnType("int")
                        .HasComment("Typical quantity ordered");

                    b.HasKey("StockItemId")
                        .HasName("PK_Warehouse_StockItemHoldings");

                    b.HasIndex("LastEditedBy");

                    b.ToTable("StockItemHoldings", "Warehouse");

                    b.HasComment("Non-temporal attributes for stock items");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.StockItemStockGroup", b =>
                {
                    b.Property<int>("StockItemStockGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StockItemStockGroupID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[StockItemStockGroupID])")
                        .HasComment("Internal reference for this linking row");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("StockGroupId")
                        .HasColumnType("int")
                        .HasColumnName("StockGroupID")
                        .HasComment("StockGroup assigned to this stock item (FK indexed via unique constraint)");

                    b.Property<int>("StockItemId")
                        .HasColumnType("int")
                        .HasColumnName("StockItemID")
                        .HasComment("Stock item assigned to this stock group (FK indexed via unique constraint)");

                    b.HasKey("StockItemStockGroupId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "StockGroupId", "StockItemId" }, "UQ_StockItemStockGroups_StockGroupID_Lookup")
                        .IsUnique();

                    b.HasIndex(new[] { "StockItemId", "StockGroupId" }, "UQ_StockItemStockGroups_StockItemID_Lookup")
                        .IsUnique();

                    b.ToTable("StockItemStockGroups", "Warehouse");

                    b.HasComment("Which stock items are in which stock groups");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.StockItemTransaction", b =>
                {
                    b.Property<int>("StockItemTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StockItemTransactionID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[TransactionID])")
                        .HasComment("Numeric ID used to refer to a stock item transaction within the database");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID")
                        .HasComment("Customer for this transaction (if applicable)");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID")
                        .HasComment("ID of an invoice (for transactions associated with an invoice)");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int")
                        .HasColumnName("PurchaseOrderID")
                        .HasComment("ID of an purchase order (for transactions associated with a purchase order)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,3)")
                        .HasComment("Quantity of stock movement (positive is incoming stock, negative is outgoing)");

                    b.Property<int>("StockItemId")
                        .HasColumnType("int")
                        .HasColumnName("StockItemID")
                        .HasComment("StockItem for this transaction");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID")
                        .HasComment("Supplier for this stock transaction (if applicable)");

                    b.Property<DateTime>("TransactionOccurredWhen")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the transaction occurred");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionTypeID")
                        .HasComment("Type of transaction");

                    b.HasKey("StockItemTransactionId")
                        .HasName("PK_Warehouse_StockItemTransactions");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("StockItemTransactionId"), false);

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "CustomerId" }, "FK_Warehouse_StockItemTransactions_CustomerID");

                    b.HasIndex(new[] { "InvoiceId" }, "FK_Warehouse_StockItemTransactions_InvoiceID");

                    b.HasIndex(new[] { "PurchaseOrderId" }, "FK_Warehouse_StockItemTransactions_PurchaseOrderID");

                    b.HasIndex(new[] { "StockItemId" }, "FK_Warehouse_StockItemTransactions_StockItemID");

                    b.HasIndex(new[] { "SupplierId" }, "FK_Warehouse_StockItemTransactions_SupplierID");

                    b.HasIndex(new[] { "TransactionTypeId" }, "FK_Warehouse_StockItemTransactions_TransactionTypeID");

                    b.ToTable("StockItemTransactions", "Warehouse");

                    b.HasComment("Transactions covering all movements of all stock items");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[SupplierID])")
                        .HasComment("Numeric ID used for reference to a supplier within the database");

                    b.Property<int>("AlternateContactPersonId")
                        .HasColumnType("int")
                        .HasColumnName("AlternateContactPersonID")
                        .HasComment("Alternate contact");

                    b.Property<string>("BankAccountBranch")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Supplier's bank branch");

                    b.Property<string>("BankAccountCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Supplier's bank account code (usually a numeric reference for the bank branch)");

                    b.Property<string>("BankAccountName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Supplier's bank account name (ie name on the account)");

                    b.Property<string>("BankAccountNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Supplier's bank account number");

                    b.Property<string>("BankInternationalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Supplier's bank's international code (such as a SWIFT code)");

                    b.Property<string>("DeliveryAddressLine1")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("First delivery address line for the supplier");

                    b.Property<string>("DeliveryAddressLine2")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Second delivery address line for the supplier");

                    b.Property<int>("DeliveryCityId")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryCityID")
                        .HasComment("ID of the delivery city for this address");

                    b.Property<Geometry>("DeliveryLocation")
                        .HasColumnType("geography")
                        .HasComment("Geographic location for the supplier's office/warehouse");

                    b.Property<int?>("DeliveryMethodId")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryMethodID")
                        .HasComment("Standard delivery method for stock items received from this supplier");

                    b.Property<string>("DeliveryPostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Delivery postal code for the supplier");

                    b.Property<string>("FaxNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Fax number");

                    b.Property<string>("InternalComments")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Internal comments (not exposed outside organization)");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("PaymentDays")
                        .HasColumnType("int")
                        .HasComment("Number of days for payment of an invoice (ie payment terms)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Phone number");

                    b.Property<string>("PostalAddressLine1")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("First postal address line for the supplier");

                    b.Property<string>("PostalAddressLine2")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Second postal address line for the supplier");

                    b.Property<int>("PostalCityId")
                        .HasColumnType("int")
                        .HasColumnName("PostalCityID")
                        .HasComment("ID of the mailing city for this address");

                    b.Property<string>("PostalPostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Postal code for the supplier when sending by mail");

                    b.Property<int>("PrimaryContactPersonId")
                        .HasColumnType("int")
                        .HasColumnName("PrimaryContactPersonID")
                        .HasComment("Primary contact");

                    b.Property<int>("SupplierCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierCategoryID")
                        .HasComment("Supplier's category");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Supplier's full name (usually a trading name)");

                    b.Property<string>("SupplierReference")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Supplier reference for our organization (might be our account number at the supplier)");

                    b.Property<DateTime>("ValidFrom")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidFrom");

                    b.Property<DateTime>("ValidTo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidTo");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("WebsiteURL")
                        .HasComment("URL for the website for this supplier");

                    b.HasKey("SupplierId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "AlternateContactPersonId" }, "FK_Purchasing_Suppliers_AlternateContactPersonID");

                    b.HasIndex(new[] { "DeliveryCityId" }, "FK_Purchasing_Suppliers_DeliveryCityID");

                    b.HasIndex(new[] { "DeliveryMethodId" }, "FK_Purchasing_Suppliers_DeliveryMethodID");

                    b.HasIndex(new[] { "PostalCityId" }, "FK_Purchasing_Suppliers_PostalCityID");

                    b.HasIndex(new[] { "PrimaryContactPersonId" }, "FK_Purchasing_Suppliers_PrimaryContactPersonID");

                    b.HasIndex(new[] { "SupplierCategoryId" }, "FK_Purchasing_Suppliers_SupplierCategoryID");

                    b.HasIndex(new[] { "SupplierName" }, "UQ_Purchasing_Suppliers_SupplierName")
                        .IsUnique();

                    b.ToTable("Suppliers", "Purchasing");

                    b
                        .HasComment("Main entity table for suppliers (organizations)")
                        .ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("Suppliers_Archive", "Purchasing");
                            ttb
                                .HasPeriodStart("ValidFrom")
                                .HasColumnName("ValidFrom");
                            ttb
                                .HasPeriodEnd("ValidTo")
                                .HasColumnName("ValidTo");
                        }
                    ));
                });

            modelBuilder.Entity("wwimporters.domain.Entities.Supplier1", b =>
                {
                    b.Property<string>("AlternateContact")
                        .HasMaxLength(58)
                        .HasColumnType("nvarchar(58)");

                    b.Property<string>("CityName")
                        .HasMaxLength(58)
                        .HasColumnType("nvarchar(58)");

                    b.Property<Geometry>("DeliveryLocation")
                        .HasColumnType("geography");

                    b.Property<string>("DeliveryMethod")
                        .HasMaxLength(58)
                        .HasColumnType("nvarchar(58)");

                    b.Property<string>("FaxNumber")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("nvarchar(28)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("nvarchar(28)");

                    b.Property<string>("PrimaryContact")
                        .HasMaxLength(58)
                        .HasColumnType("nvarchar(58)");

                    b.Property<string>("SupplierCategoryName")
                        .HasMaxLength(58)
                        .HasColumnType("nvarchar(58)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(107)
                        .HasColumnType("nvarchar(107)");

                    b.Property<string>("SupplierReference")
                        .HasMaxLength(28)
                        .HasColumnType("nvarchar(28)");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasMaxLength(264)
                        .HasColumnType("nvarchar(264)")
                        .HasColumnName("WebsiteURL");

                    b.ToView("Suppliers", "Website");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.SupplierCategory", b =>
                {
                    b.Property<int>("SupplierCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierCategoryID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[SupplierCategoryID])")
                        .HasComment("Numeric ID used for reference to a supplier category within the database");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<string>("SupplierCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Full name of the category that suppliers can be assigned to");

                    b.Property<DateTime>("ValidFrom")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidFrom");

                    b.Property<DateTime>("ValidTo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidTo");

                    b.HasKey("SupplierCategoryId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "SupplierCategoryName" }, "UQ_Purchasing_SupplierCategories_SupplierCategoryName")
                        .IsUnique();

                    b.ToTable("SupplierCategories", "Purchasing");

                    b
                        .HasComment("Categories for suppliers (ie novelties, toys, clothing, packaging, etc.)")
                        .ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("SupplierCategories_Archive", "Purchasing");
                            ttb
                                .HasPeriodStart("ValidFrom")
                                .HasColumnName("ValidFrom");
                            ttb
                                .HasPeriodEnd("ValidTo")
                                .HasColumnName("ValidTo");
                        }
                    ));
                });

            modelBuilder.Entity("wwimporters.domain.Entities.SupplierTransaction", b =>
                {
                    b.Property<int>("SupplierTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierTransactionID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[TransactionID])")
                        .HasComment("Numeric ID used to refer to a supplier transaction within the database");

                    b.Property<decimal>("AmountExcludingTax")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Transaction amount (excluding tax)");

                    b.Property<DateTime?>("FinalizationDate")
                        .HasColumnType("date")
                        .HasComment("Date that this transaction was finalized (if it has been)");

                    b.Property<bool?>("IsFinalized")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit")
                        .HasComputedColumnSql("(case when [FinalizationDate] IS NULL then CONVERT([bit],(0)) else CONVERT([bit],(1)) end)", true)
                        .HasComment("Is this transaction finalized (invoices, credits and payments have been matched)");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<decimal>("OutstandingBalance")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Amount still outstanding for this transaction");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentMethodID")
                        .HasComment("ID of a payment method (for transactions involving payments)");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int")
                        .HasColumnName("PurchaseOrderID")
                        .HasComment("ID of an purchase order (for transactions associated with a purchase order)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID")
                        .HasComment("Supplier for this transaction");

                    b.Property<string>("SupplierInvoiceNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Invoice number for an invoice received from the supplier");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Tax amount calculated");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Transaction amount (including tax)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("date")
                        .HasComment("Date for the transaction");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionTypeID")
                        .HasComment("Type of transaction");

                    b.HasKey("SupplierTransactionId")
                        .HasName("PK_Purchasing_SupplierTransactions");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("SupplierTransactionId"), false);

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TransactionTypeId");

                    b.HasIndex(new[] { "TransactionDate" }, "CX_Purchasing_SupplierTransactions");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "TransactionDate" }, "CX_Purchasing_SupplierTransactions"));

                    b.HasIndex(new[] { "TransactionDate", "PaymentMethodId" }, "FK_Purchasing_SupplierTransactions_PaymentMethodID");

                    b.HasIndex(new[] { "TransactionDate", "PurchaseOrderId" }, "FK_Purchasing_SupplierTransactions_PurchaseOrderID");

                    b.HasIndex(new[] { "TransactionDate", "SupplierId" }, "FK_Purchasing_SupplierTransactions_SupplierID");

                    b.HasIndex(new[] { "TransactionDate", "TransactionTypeId" }, "FK_Purchasing_SupplierTransactions_TransactionTypeID");

                    b.HasIndex(new[] { "TransactionDate", "IsFinalized" }, "IX_Purchasing_SupplierTransactions_IsFinalized");

                    b.ToTable("SupplierTransactions", "Purchasing");

                    b.HasComment("All financial transactions that are supplier-related");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.SystemParameter", b =>
                {
                    b.Property<int>("SystemParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SystemParameterID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[SystemParameterID])")
                        .HasComment("Numeric ID used for row holding system parameters");

                    b.Property<string>("ApplicationSettings")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("JSON-structured application settings");

                    b.Property<string>("DeliveryAddressLine1")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("First address line for the company");

                    b.Property<string>("DeliveryAddressLine2")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Second address line for the company");

                    b.Property<int>("DeliveryCityId")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryCityID")
                        .HasComment("ID of the city for this address");

                    b.Property<Geometry>("DeliveryLocation")
                        .IsRequired()
                        .HasColumnType("geography")
                        .HasComment("Geographic location for the company office");

                    b.Property<string>("DeliveryPostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Postal code for the company");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("PostalAddressLine1")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("First postal address line for the company");

                    b.Property<string>("PostalAddressLine2")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Second postaladdress line for the company");

                    b.Property<int>("PostalCityId")
                        .HasColumnType("int")
                        .HasColumnName("PostalCityID")
                        .HasComment("ID of the city for this postaladdress");

                    b.Property<string>("PostalPostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Postal code for the company when sending via mail");

                    b.HasKey("SystemParameterId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "DeliveryCityId" }, "FK_Application_SystemParameters_DeliveryCityID");

                    b.HasIndex(new[] { "PostalCityId" }, "FK_Application_SystemParameters_PostalCityID");

                    b.ToTable("SystemParameters", "Application");

                    b.HasComment("Any configurable parameters for the whole system");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.TransactionType", b =>
                {
                    b.Property<int>("TransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionTypeID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[TransactionTypeID])")
                        .HasComment("Numeric ID used for reference to a transaction type within the database");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<string>("TransactionTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Full name of the transaction type");

                    b.Property<DateTime>("ValidFrom")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidFrom");

                    b.Property<DateTime>("ValidTo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidTo");

                    b.HasKey("TransactionTypeId");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex(new[] { "TransactionTypeName" }, "UQ_Application_TransactionTypes_TransactionTypeName")
                        .IsUnique();

                    b.ToTable("TransactionTypes", "Application");

                    b
                        .HasComment("Types of customer, supplier, or stock transactions (ie: invoice, credit note, etc.)")
                        .ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("TransactionTypes_Archive", "Application");
                            ttb
                                .HasPeriodStart("ValidFrom")
                                .HasColumnName("ValidFrom");
                            ttb
                                .HasPeriodEnd("ValidTo")
                                .HasColumnName("ValidTo");
                        }
                    ));
                });

            modelBuilder.Entity("wwimporters.domain.Entities.VehicleTemperature", b =>
                {
                    b.Property<long>("VehicleTemperatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("VehicleTemperatureID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("VehicleTemperatureId"), 1L, 1);

                    b.Property<int>("ChillerSensorNumber")
                        .HasColumnType("int");

                    b.Property<byte[]>("CompressedSensorData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FullSensorData")
                        .HasMaxLength(1008)
                        .HasColumnType("nvarchar(1008)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.Property<bool>("IsCompressed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RecordedWhen")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("VehicleRegistration")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("nvarchar(28)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.HasKey("VehicleTemperatureId")
                        .HasName("PK_Warehouse_VehicleTemperatures");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("VehicleTemperatureId"), false);

                    b.ToTable("VehicleTemperatures", "Warehouse");

                    SqlServerEntityTypeBuilderExtensions.IsMemoryOptimized(b);
                });

            modelBuilder.Entity("wwimporters.domain.Entities.VehicleTemperature1", b =>
                {
                    b.Property<int>("ChillerSensorNumber")
                        .HasColumnType("int");

                    b.Property<string>("FullSensorData")
                        .HasMaxLength(1008)
                        .HasColumnType("nvarchar(1008)");

                    b.Property<DateTime>("RecordedWhen")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("VehicleRegistration")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("nvarchar(28)");

                    b.Property<long>("VehicleTemperatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("VehicleTemperatureID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("VehicleTemperatureId"), 1L, 1);

                    b.ToView("VehicleTemperatures", "Website");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.BuyingGroup", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("BuyingGroups")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_BuyingGroups_Application_People");

                    b.Navigation("LastEditedByNavigation");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.City", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("Cities")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Application_Cities_Application_People");

                    b.HasOne("wwimporters.domain.Entities.StateProvince", "StateProvince")
                        .WithMany("Cities")
                        .HasForeignKey("StateProvinceId")
                        .IsRequired()
                        .HasConstraintName("FK_Application_Cities_StateProvinceID_Application_StateProvinces");

                    b.Navigation("LastEditedByNavigation");

                    b.Navigation("StateProvince");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.Color", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("Colors")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Warehouse_Colors_Application_People");

                    b.Navigation("LastEditedByNavigation");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.Country", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("Countries")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Application_Countries_Application_People");

                    b.Navigation("LastEditedByNavigation");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.Customer", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Person", "AlternateContactPerson")
                        .WithMany("CustomerAlternateContactPeople")
                        .HasForeignKey("AlternateContactPersonId")
                        .HasConstraintName("FK_Sales_Customers_AlternateContactPersonID_Application_People");

                    b.HasOne("wwimporters.domain.Entities.Customer", "BillToCustomer")
                        .WithMany("InverseBillToCustomer")
                        .HasForeignKey("BillToCustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_Customers_BillToCustomerID_Sales_Customers");

                    b.HasOne("wwimporters.domain.Entities.BuyingGroup", "BuyingGroup")
                        .WithMany("Customers")
                        .HasForeignKey("BuyingGroupId")
                        .HasConstraintName("FK_Sales_Customers_BuyingGroupID_Sales_BuyingGroups");

                    b.HasOne("wwimporters.domain.Entities.CustomerCategory", "CustomerCategory")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_Customers_CustomerCategoryID_Sales_CustomerCategories");

                    b.HasOne("wwimporters.domain.Entities.City", "DeliveryCity")
                        .WithMany("CustomerDeliveryCities")
                        .HasForeignKey("DeliveryCityId")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_Customers_DeliveryCityID_Application_Cities");

                    b.HasOne("wwimporters.domain.Entities.DeliveryMethod", "DeliveryMethod")
                        .WithMany("Customers")
                        .HasForeignKey("DeliveryMethodId")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_Customers_DeliveryMethodID_Application_DeliveryMethods");

                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("CustomerLastEditedByNavigations")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_Customers_Application_People");

                    b.HasOne("wwimporters.domain.Entities.City", "PostalCity")
                        .WithMany("CustomerPostalCities")
                        .HasForeignKey("PostalCityId")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_Customers_PostalCityID_Application_Cities");

                    b.HasOne("wwimporters.domain.Entities.Person", "PrimaryContactPerson")
                        .WithMany("CustomerPrimaryContactPeople")
                        .HasForeignKey("PrimaryContactPersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_Customers_PrimaryContactPersonID_Application_People");

                    b.Navigation("AlternateContactPerson");

                    b.Navigation("BillToCustomer");

                    b.Navigation("BuyingGroup");

                    b.Navigation("CustomerCategory");

                    b.Navigation("DeliveryCity");

                    b.Navigation("DeliveryMethod");

                    b.Navigation("LastEditedByNavigation");

                    b.Navigation("PostalCity");

                    b.Navigation("PrimaryContactPerson");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.CustomerCategory", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("CustomerCategories")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_CustomerCategories_Application_People");

                    b.Navigation("LastEditedByNavigation");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.CustomerTransaction", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Customer", "Customer")
                        .WithMany("CustomerTransactions")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_CustomerTransactions_CustomerID_Sales_Customers");

                    b.HasOne("wwimporters.domain.Entities.Invoice", "Invoice")
                        .WithMany("CustomerTransactions")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("FK_Sales_CustomerTransactions_InvoiceID_Sales_Invoices");

                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("CustomerTransactions")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_CustomerTransactions_Application_People");

                    b.HasOne("wwimporters.domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("CustomerTransactions")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK_Sales_CustomerTransactions_PaymentMethodID_Application_PaymentMethods");

                    b.HasOne("wwimporters.domain.Entities.TransactionType", "TransactionType")
                        .WithMany("CustomerTransactions")
                        .HasForeignKey("TransactionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_CustomerTransactions_TransactionTypeID_Application_TransactionTypes");

                    b.Navigation("Customer");

                    b.Navigation("Invoice");

                    b.Navigation("LastEditedByNavigation");

                    b.Navigation("PaymentMethod");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.DeliveryMethod", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("DeliveryMethods")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Application_DeliveryMethods_Application_People");

                    b.Navigation("LastEditedByNavigation");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.Invoice", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Person", "AccountsPerson")
                        .WithMany("InvoiceAccountsPeople")
                        .HasForeignKey("AccountsPersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_Invoices_AccountsPersonID_Application_People");

                    b.HasOne("wwimporters.domain.Entities.Customer", "BillToCustomer")
                        .WithMany("InvoiceBillToCustomers")
                        .HasForeignKey("BillToCustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_Invoices_BillToCustomerID_Sales_Customers");

                    b.HasOne("wwimporters.domain.Entities.Person", "ContactPerson")
                        .WithMany("InvoiceContactPeople")
                        .HasForeignKey("ContactPersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_Invoices_ContactPersonID_Application_People");

                    b.HasOne("wwimporters.domain.Entities.Customer", "Customer")
                        .WithMany("InvoiceCustomers")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_Invoices_CustomerID_Sales_Customers");

                    b.HasOne("wwimporters.domain.Entities.DeliveryMethod", "DeliveryMethod")
                        .WithMany("Invoices")
                        .HasForeignKey("DeliveryMethodId")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_Invoices_DeliveryMethodID_Application_DeliveryMethods");

                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("InvoiceLastEditedByNavigations")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_Invoices_Application_People");

                    b.HasOne("wwimporters.domain.Entities.Order", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Sales_Invoices_OrderID_Sales_Orders");

                    b.HasOne("wwimporters.domain.Entities.Person", "PackedByPerson")
                        .WithMany("InvoicePackedByPeople")
                        .HasForeignKey("PackedByPersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_Invoices_PackedByPersonID_Application_People");

                    b.HasOne("wwimporters.domain.Entities.Person", "SalespersonPerson")
                        .WithMany("InvoiceSalespersonPeople")
                        .HasForeignKey("SalespersonPersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_Invoices_SalespersonPersonID_Application_People");

                    b.Navigation("AccountsPerson");

                    b.Navigation("BillToCustomer");

                    b.Navigation("ContactPerson");

                    b.Navigation("Customer");

                    b.Navigation("DeliveryMethod");

                    b.Navigation("LastEditedByNavigation");

                    b.Navigation("Order");

                    b.Navigation("PackedByPerson");

                    b.Navigation("SalespersonPerson");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.InvoiceLine", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("InvoiceId")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_InvoiceLines_InvoiceID_Sales_Invoices");

                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_InvoiceLines_Application_People");

                    b.HasOne("wwimporters.domain.Entities.PackageType", "PackageType")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("PackageTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_InvoiceLines_PackageTypeID_Warehouse_PackageTypes");

                    b.HasOne("wwimporters.domain.Entities.StockItem", "StockItem")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("StockItemId")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_InvoiceLines_StockItemID_Warehouse_StockItems");

                    b.Navigation("Invoice");

                    b.Navigation("LastEditedByNavigation");

                    b.Navigation("PackageType");

                    b.Navigation("StockItem");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.Order", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Order", "BackorderOrder")
                        .WithMany("InverseBackorderOrder")
                        .HasForeignKey("BackorderOrderId")
                        .HasConstraintName("FK_Sales_Orders_BackorderOrderID_Sales_Orders");

                    b.HasOne("wwimporters.domain.Entities.Person", "ContactPerson")
                        .WithMany("OrderContactPeople")
                        .HasForeignKey("ContactPersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_Orders_ContactPersonID_Application_People");

                    b.HasOne("wwimporters.domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_Orders_CustomerID_Sales_Customers");

                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("OrderLastEditedByNavigations")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_Orders_Application_People");

                    b.HasOne("wwimporters.domain.Entities.Person", "PickedByPerson")
                        .WithMany("OrderPickedByPeople")
                        .HasForeignKey("PickedByPersonId")
                        .HasConstraintName("FK_Sales_Orders_PickedByPersonID_Application_People");

                    b.HasOne("wwimporters.domain.Entities.Person", "SalespersonPerson")
                        .WithMany("OrderSalespersonPeople")
                        .HasForeignKey("SalespersonPersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_Orders_SalespersonPersonID_Application_People");

                    b.Navigation("BackorderOrder");

                    b.Navigation("ContactPerson");

                    b.Navigation("Customer");

                    b.Navigation("LastEditedByNavigation");

                    b.Navigation("PickedByPerson");

                    b.Navigation("SalespersonPerson");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.OrderLine", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("OrderLines")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_OrderLines_Application_People");

                    b.HasOne("wwimporters.domain.Entities.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_OrderLines_OrderID_Sales_Orders");

                    b.HasOne("wwimporters.domain.Entities.PackageType", "PackageType")
                        .WithMany("OrderLines")
                        .HasForeignKey("PackageTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_OrderLines_PackageTypeID_Warehouse_PackageTypes");

                    b.HasOne("wwimporters.domain.Entities.StockItem", "StockItem")
                        .WithMany("OrderLines")
                        .HasForeignKey("StockItemId")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_OrderLines_StockItemID_Warehouse_StockItems");

                    b.Navigation("LastEditedByNavigation");

                    b.Navigation("Order");

                    b.Navigation("PackageType");

                    b.Navigation("StockItem");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.PackageType", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("PackageTypes")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Warehouse_PackageTypes_Application_People");

                    b.Navigation("LastEditedByNavigation");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.PaymentMethod", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Application_PaymentMethods_Application_People");

                    b.Navigation("LastEditedByNavigation");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.Person", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("InverseLastEditedByNavigation")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Application_People_Application_People");

                    b.Navigation("LastEditedByNavigation");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Person", "ContactPerson")
                        .WithMany("PurchaseOrderContactPeople")
                        .HasForeignKey("ContactPersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Purchasing_PurchaseOrders_ContactPersonID_Application_People");

                    b.HasOne("wwimporters.domain.Entities.DeliveryMethod", "DeliveryMethod")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("DeliveryMethodId")
                        .IsRequired()
                        .HasConstraintName("FK_Purchasing_PurchaseOrders_DeliveryMethodID_Application_DeliveryMethods");

                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("PurchaseOrderLastEditedByNavigations")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Purchasing_PurchaseOrders_Application_People");

                    b.HasOne("wwimporters.domain.Entities.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_Purchasing_PurchaseOrders_SupplierID_Purchasing_Suppliers");

                    b.Navigation("ContactPerson");

                    b.Navigation("DeliveryMethod");

                    b.Navigation("LastEditedByNavigation");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.PurchaseOrderLine", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Purchasing_PurchaseOrderLines_Application_People");

                    b.HasOne("wwimporters.domain.Entities.PackageType", "PackageType")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("PackageTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Purchasing_PurchaseOrderLines_PackageTypeID_Warehouse_PackageTypes");

                    b.HasOne("wwimporters.domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("PurchaseOrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Purchasing_PurchaseOrderLines_PurchaseOrderID_Purchasing_PurchaseOrders");

                    b.HasOne("wwimporters.domain.Entities.StockItem", "StockItem")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("StockItemId")
                        .IsRequired()
                        .HasConstraintName("FK_Purchasing_PurchaseOrderLines_StockItemID_Warehouse_StockItems");

                    b.Navigation("LastEditedByNavigation");

                    b.Navigation("PackageType");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("StockItem");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.SpecialDeal", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.BuyingGroup", "BuyingGroup")
                        .WithMany("SpecialDeals")
                        .HasForeignKey("BuyingGroupId")
                        .HasConstraintName("FK_Sales_SpecialDeals_BuyingGroupID_Sales_BuyingGroups");

                    b.HasOne("wwimporters.domain.Entities.CustomerCategory", "CustomerCategory")
                        .WithMany("SpecialDeals")
                        .HasForeignKey("CustomerCategoryId")
                        .HasConstraintName("FK_Sales_SpecialDeals_CustomerCategoryID_Sales_CustomerCategories");

                    b.HasOne("wwimporters.domain.Entities.Customer", "Customer")
                        .WithMany("SpecialDeals")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Sales_SpecialDeals_CustomerID_Sales_Customers");

                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("SpecialDeals")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Sales_SpecialDeals_Application_People");

                    b.HasOne("wwimporters.domain.Entities.StockGroup", "StockGroup")
                        .WithMany("SpecialDeals")
                        .HasForeignKey("StockGroupId")
                        .HasConstraintName("FK_Sales_SpecialDeals_StockGroupID_Warehouse_StockGroups");

                    b.HasOne("wwimporters.domain.Entities.StockItem", "StockItem")
                        .WithMany("SpecialDeals")
                        .HasForeignKey("StockItemId")
                        .HasConstraintName("FK_Sales_SpecialDeals_StockItemID_Warehouse_StockItems");

                    b.Navigation("BuyingGroup");

                    b.Navigation("Customer");

                    b.Navigation("CustomerCategory");

                    b.Navigation("LastEditedByNavigation");

                    b.Navigation("StockGroup");

                    b.Navigation("StockItem");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.StateProvince", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Country", "Country")
                        .WithMany("StateProvinces")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_Application_StateProvinces_CountryID_Application_Countries");

                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("StateProvinces")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Application_StateProvinces_Application_People");

                    b.Navigation("Country");

                    b.Navigation("LastEditedByNavigation");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.StockGroup", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("StockGroups")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Warehouse_StockGroups_Application_People");

                    b.Navigation("LastEditedByNavigation");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.StockItem", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Color", "Color")
                        .WithMany("StockItems")
                        .HasForeignKey("ColorId")
                        .HasConstraintName("FK_Warehouse_StockItems_ColorID_Warehouse_Colors");

                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("StockItems")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Warehouse_StockItems_Application_People");

                    b.HasOne("wwimporters.domain.Entities.PackageType", "OuterPackage")
                        .WithMany("StockItemOuterPackages")
                        .HasForeignKey("OuterPackageId")
                        .IsRequired()
                        .HasConstraintName("FK_Warehouse_StockItems_OuterPackageID_Warehouse_PackageTypes");

                    b.HasOne("wwimporters.domain.Entities.Supplier", "Supplier")
                        .WithMany("StockItems")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_Warehouse_StockItems_SupplierID_Purchasing_Suppliers");

                    b.HasOne("wwimporters.domain.Entities.PackageType", "UnitPackage")
                        .WithMany("StockItemUnitPackages")
                        .HasForeignKey("UnitPackageId")
                        .IsRequired()
                        .HasConstraintName("FK_Warehouse_StockItems_UnitPackageID_Warehouse_PackageTypes");

                    b.Navigation("Color");

                    b.Navigation("LastEditedByNavigation");

                    b.Navigation("OuterPackage");

                    b.Navigation("Supplier");

                    b.Navigation("UnitPackage");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.StockItemHolding", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("StockItemHoldings")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Warehouse_StockItemHoldings_Application_People");

                    b.HasOne("wwimporters.domain.Entities.StockItem", "StockItem")
                        .WithOne("StockItemHolding")
                        .HasForeignKey("wwimporters.domain.Entities.StockItemHolding", "StockItemId")
                        .IsRequired()
                        .HasConstraintName("PKFK_Warehouse_StockItemHoldings_StockItemID_Warehouse_StockItems");

                    b.Navigation("LastEditedByNavigation");

                    b.Navigation("StockItem");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.StockItemStockGroup", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("StockItemStockGroups")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Warehouse_StockItemStockGroups_Application_People");

                    b.HasOne("wwimporters.domain.Entities.StockGroup", "StockGroup")
                        .WithMany("StockItemStockGroups")
                        .HasForeignKey("StockGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_Warehouse_StockItemStockGroups_StockGroupID_Warehouse_StockGroups");

                    b.HasOne("wwimporters.domain.Entities.StockItem", "StockItem")
                        .WithMany("StockItemStockGroups")
                        .HasForeignKey("StockItemId")
                        .IsRequired()
                        .HasConstraintName("FK_Warehouse_StockItemStockGroups_StockItemID_Warehouse_StockItems");

                    b.Navigation("LastEditedByNavigation");

                    b.Navigation("StockGroup");

                    b.Navigation("StockItem");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.StockItemTransaction", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Customer", "Customer")
                        .WithMany("StockItemTransactions")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Warehouse_StockItemTransactions_CustomerID_Sales_Customers");

                    b.HasOne("wwimporters.domain.Entities.Invoice", "Invoice")
                        .WithMany("StockItemTransactions")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("FK_Warehouse_StockItemTransactions_InvoiceID_Sales_Invoices");

                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("StockItemTransactions")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Warehouse_StockItemTransactions_Application_People");

                    b.HasOne("wwimporters.domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("StockItemTransactions")
                        .HasForeignKey("PurchaseOrderId")
                        .HasConstraintName("FK_Warehouse_StockItemTransactions_PurchaseOrderID_Purchasing_PurchaseOrders");

                    b.HasOne("wwimporters.domain.Entities.StockItem", "StockItem")
                        .WithMany("StockItemTransactions")
                        .HasForeignKey("StockItemId")
                        .IsRequired()
                        .HasConstraintName("FK_Warehouse_StockItemTransactions_StockItemID_Warehouse_StockItems");

                    b.HasOne("wwimporters.domain.Entities.Supplier", "Supplier")
                        .WithMany("StockItemTransactions")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_Warehouse_StockItemTransactions_SupplierID_Purchasing_Suppliers");

                    b.HasOne("wwimporters.domain.Entities.TransactionType", "TransactionType")
                        .WithMany("StockItemTransactions")
                        .HasForeignKey("TransactionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Warehouse_StockItemTransactions_TransactionTypeID_Application_TransactionTypes");

                    b.Navigation("Customer");

                    b.Navigation("Invoice");

                    b.Navigation("LastEditedByNavigation");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("StockItem");

                    b.Navigation("Supplier");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.Supplier", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Person", "AlternateContactPerson")
                        .WithMany("SupplierAlternateContactPeople")
                        .HasForeignKey("AlternateContactPersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Purchasing_Suppliers_AlternateContactPersonID_Application_People");

                    b.HasOne("wwimporters.domain.Entities.City", "DeliveryCity")
                        .WithMany("SupplierDeliveryCities")
                        .HasForeignKey("DeliveryCityId")
                        .IsRequired()
                        .HasConstraintName("FK_Purchasing_Suppliers_DeliveryCityID_Application_Cities");

                    b.HasOne("wwimporters.domain.Entities.DeliveryMethod", "DeliveryMethod")
                        .WithMany("Suppliers")
                        .HasForeignKey("DeliveryMethodId")
                        .HasConstraintName("FK_Purchasing_Suppliers_DeliveryMethodID_Application_DeliveryMethods");

                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("SupplierLastEditedByNavigations")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Purchasing_Suppliers_Application_People");

                    b.HasOne("wwimporters.domain.Entities.City", "PostalCity")
                        .WithMany("SupplierPostalCities")
                        .HasForeignKey("PostalCityId")
                        .IsRequired()
                        .HasConstraintName("FK_Purchasing_Suppliers_PostalCityID_Application_Cities");

                    b.HasOne("wwimporters.domain.Entities.Person", "PrimaryContactPerson")
                        .WithMany("SupplierPrimaryContactPeople")
                        .HasForeignKey("PrimaryContactPersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Purchasing_Suppliers_PrimaryContactPersonID_Application_People");

                    b.HasOne("wwimporters.domain.Entities.SupplierCategory", "SupplierCategory")
                        .WithMany("Suppliers")
                        .HasForeignKey("SupplierCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Purchasing_Suppliers_SupplierCategoryID_Purchasing_SupplierCategories");

                    b.Navigation("AlternateContactPerson");

                    b.Navigation("DeliveryCity");

                    b.Navigation("DeliveryMethod");

                    b.Navigation("LastEditedByNavigation");

                    b.Navigation("PostalCity");

                    b.Navigation("PrimaryContactPerson");

                    b.Navigation("SupplierCategory");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.SupplierCategory", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("SupplierCategories")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Purchasing_SupplierCategories_Application_People");

                    b.Navigation("LastEditedByNavigation");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.SupplierTransaction", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("SupplierTransactions")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Purchasing_SupplierTransactions_Application_People");

                    b.HasOne("wwimporters.domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("SupplierTransactions")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK_Purchasing_SupplierTransactions_PaymentMethodID_Application_PaymentMethods");

                    b.HasOne("wwimporters.domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("SupplierTransactions")
                        .HasForeignKey("PurchaseOrderId")
                        .HasConstraintName("FK_Purchasing_SupplierTransactions_PurchaseOrderID_Purchasing_PurchaseOrders");

                    b.HasOne("wwimporters.domain.Entities.Supplier", "Supplier")
                        .WithMany("SupplierTransactions")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_Purchasing_SupplierTransactions_SupplierID_Purchasing_Suppliers");

                    b.HasOne("wwimporters.domain.Entities.TransactionType", "TransactionType")
                        .WithMany("SupplierTransactions")
                        .HasForeignKey("TransactionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Purchasing_SupplierTransactions_TransactionTypeID_Application_TransactionTypes");

                    b.Navigation("LastEditedByNavigation");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Supplier");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.SystemParameter", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.City", "DeliveryCity")
                        .WithMany("SystemParameterDeliveryCities")
                        .HasForeignKey("DeliveryCityId")
                        .IsRequired()
                        .HasConstraintName("FK_Application_SystemParameters_DeliveryCityID_Application_Cities");

                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("SystemParameters")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Application_SystemParameters_Application_People");

                    b.HasOne("wwimporters.domain.Entities.City", "PostalCity")
                        .WithMany("SystemParameterPostalCities")
                        .HasForeignKey("PostalCityId")
                        .IsRequired()
                        .HasConstraintName("FK_Application_SystemParameters_PostalCityID_Application_Cities");

                    b.Navigation("DeliveryCity");

                    b.Navigation("LastEditedByNavigation");

                    b.Navigation("PostalCity");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.TransactionType", b =>
                {
                    b.HasOne("wwimporters.domain.Entities.Person", "LastEditedByNavigation")
                        .WithMany("TransactionTypes")
                        .HasForeignKey("LastEditedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Application_TransactionTypes_Application_People");

                    b.Navigation("LastEditedByNavigation");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.BuyingGroup", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("SpecialDeals");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.City", b =>
                {
                    b.Navigation("CustomerDeliveryCities");

                    b.Navigation("CustomerPostalCities");

                    b.Navigation("SupplierDeliveryCities");

                    b.Navigation("SupplierPostalCities");

                    b.Navigation("SystemParameterDeliveryCities");

                    b.Navigation("SystemParameterPostalCities");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.Color", b =>
                {
                    b.Navigation("StockItems");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.Country", b =>
                {
                    b.Navigation("StateProvinces");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.Customer", b =>
                {
                    b.Navigation("CustomerTransactions");

                    b.Navigation("InverseBillToCustomer");

                    b.Navigation("InvoiceBillToCustomers");

                    b.Navigation("InvoiceCustomers");

                    b.Navigation("Orders");

                    b.Navigation("SpecialDeals");

                    b.Navigation("StockItemTransactions");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.CustomerCategory", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("SpecialDeals");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.DeliveryMethod", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Invoices");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.Invoice", b =>
                {
                    b.Navigation("CustomerTransactions");

                    b.Navigation("InvoiceLines");

                    b.Navigation("StockItemTransactions");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.Order", b =>
                {
                    b.Navigation("InverseBackorderOrder");

                    b.Navigation("Invoices");

                    b.Navigation("OrderLines");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.PackageType", b =>
                {
                    b.Navigation("InvoiceLines");

                    b.Navigation("OrderLines");

                    b.Navigation("PurchaseOrderLines");

                    b.Navigation("StockItemOuterPackages");

                    b.Navigation("StockItemUnitPackages");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("CustomerTransactions");

                    b.Navigation("SupplierTransactions");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.Person", b =>
                {
                    b.Navigation("BuyingGroups");

                    b.Navigation("Cities");

                    b.Navigation("Colors");

                    b.Navigation("Countries");

                    b.Navigation("CustomerAlternateContactPeople");

                    b.Navigation("CustomerCategories");

                    b.Navigation("CustomerLastEditedByNavigations");

                    b.Navigation("CustomerPrimaryContactPeople");

                    b.Navigation("CustomerTransactions");

                    b.Navigation("DeliveryMethods");

                    b.Navigation("InverseLastEditedByNavigation");

                    b.Navigation("InvoiceAccountsPeople");

                    b.Navigation("InvoiceContactPeople");

                    b.Navigation("InvoiceLastEditedByNavigations");

                    b.Navigation("InvoiceLines");

                    b.Navigation("InvoicePackedByPeople");

                    b.Navigation("InvoiceSalespersonPeople");

                    b.Navigation("OrderContactPeople");

                    b.Navigation("OrderLastEditedByNavigations");

                    b.Navigation("OrderLines");

                    b.Navigation("OrderPickedByPeople");

                    b.Navigation("OrderSalespersonPeople");

                    b.Navigation("PackageTypes");

                    b.Navigation("PaymentMethods");

                    b.Navigation("PurchaseOrderContactPeople");

                    b.Navigation("PurchaseOrderLastEditedByNavigations");

                    b.Navigation("PurchaseOrderLines");

                    b.Navigation("SpecialDeals");

                    b.Navigation("StateProvinces");

                    b.Navigation("StockGroups");

                    b.Navigation("StockItemHoldings");

                    b.Navigation("StockItemStockGroups");

                    b.Navigation("StockItemTransactions");

                    b.Navigation("StockItems");

                    b.Navigation("SupplierAlternateContactPeople");

                    b.Navigation("SupplierCategories");

                    b.Navigation("SupplierLastEditedByNavigations");

                    b.Navigation("SupplierPrimaryContactPeople");

                    b.Navigation("SupplierTransactions");

                    b.Navigation("SystemParameters");

                    b.Navigation("TransactionTypes");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseOrderLines");

                    b.Navigation("StockItemTransactions");

                    b.Navigation("SupplierTransactions");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.StateProvince", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.StockGroup", b =>
                {
                    b.Navigation("SpecialDeals");

                    b.Navigation("StockItemStockGroups");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.StockItem", b =>
                {
                    b.Navigation("InvoiceLines");

                    b.Navigation("OrderLines");

                    b.Navigation("PurchaseOrderLines");

                    b.Navigation("SpecialDeals");

                    b.Navigation("StockItemHolding")
                        .IsRequired();

                    b.Navigation("StockItemStockGroups");

                    b.Navigation("StockItemTransactions");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.Supplier", b =>
                {
                    b.Navigation("PurchaseOrders");

                    b.Navigation("StockItemTransactions");

                    b.Navigation("StockItems");

                    b.Navigation("SupplierTransactions");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.SupplierCategory", b =>
                {
                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("wwimporters.domain.Entities.TransactionType", b =>
                {
                    b.Navigation("CustomerTransactions");

                    b.Navigation("StockItemTransactions");

                    b.Navigation("SupplierTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
